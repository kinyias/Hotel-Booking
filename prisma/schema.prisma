generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hotel {
  id                  String    @id @default(uuid())
  userId              String
  title               String
  description         String
  image               String
  city                String
  district            String
  locationDescription String
  googleMapAddress    String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @default(now())
  room                Room[]
  booking             Booking[]

  Policy       Policy[]
  HotelAmenity HotelAmenity[]
}

model Room {
  id             String @id @default(uuid())
  title          String
  description    String
  bedCount       Int    @default(0)
  guestCount     Int    @default(0)
  bathroomCount  Int    @default(0)
  singleBed      Int    @default(0)
  doubleBed      Int    @default(0)
  breakFastPrice Int
  roomPrice      Int
  image          String
  hotelId        String
  roomTypeId     String
  roomRateId     String
  Hotel Hotel? @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  RoomType RoomType? @relation(fields: [roomTypeId], references: [id], onDelete: Cascade)
  RoomRate RoomRate? @relation(fields: [roomRateId], references: [id], onDelete: Cascade)
  Booking     Booking[]
  RoomAmenity RoomAmenity[]
  Review      Review[]
  SeasonPricing SeasonPricing[]
  Pax Pax[]

  @@index([hotelId])
  @@index([roomTypeId])
  @@index([roomRateId])
}


model Booking {
  id                String   @id @default(uuid())
  userName          String
  userEmail         String
  userId            String
  hotelId           String
  roomId            String
  hotelOwnerId      String
  startDate         DateTime
  endDate           DateTime
  breakFastIncluded Boolean
  currency          String
  totalPrice        Int
  paymentStatus     Boolean  @default(false)
  paymentIntentId   String   @unique
  bookedAt          DateTime @default(now())

  Hotel Hotel? @relation(fields: [hotelId], references: [id])
  Room  Room?  @relation(fields: [roomId], references: [id])
  @@index([hotelId])
  @@index([roomId])
  Refunds Refunds[]
  PaymentMethod PaymentMethod[]
}

model Review {
  id         String   @id @default(uuid())
  stars      String
  comment    String
  reviewDate DateTime @default(now())
  userId     String
  roomId     String

  Room Room? @relation(fields: [roomId], references: [id])

  @@index([roomId])
}

model News {
  id          String   @id @default(uuid())
  title       String
  content     String
  image String
  createdDate DateTime @default(now())
  userId      String

  @@index([userId])
}

model Policy {
  id      String @id @default(uuid())
  title   String
  content String
  hotelId String

  Hotel Hotel? @relation(fields: [hotelId], references: [id])

  @@index([hotelId])
}

model Amenity {
  id           String         @id @default(uuid())
  name         String
  type         String
  icon         String
  HotelAmenity HotelAmenity[]
  RoomAmenity  RoomAmenity[]
}

model HotelAmenity {
  id        String @id @default(uuid())
  hotelId   String
  amenityId String

  Hotel   Hotel?   @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  Amenity Amenity? @relation(fields: [amenityId], references: [id])

  @@index([hotelId])
  @@index([amenityId])
}

model RoomAmenity {
  id        String @id @default(uuid())
  roomId    String
  amenityId String

  Room    Room?    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  Amenity Amenity? @relation(fields: [amenityId], references: [id])

  @@index([roomId])
  @@index([amenityId])
}

model Season{
  id String @id @default(uuid())
  seasonName String 
  startDate DateTime
  endDate DateTime
  description String
  SeasonPricing SeasonPricing[]
}

model SeasonPricing{
  id String @id @default(uuid())
  price Int 
  seasonId String
  roomId String
  Room    Room?    @relation(fields: [roomId], references: [id])
  Season Season? @relation(fields: [seasonId], references: [id])

  @@index([roomId])
  @@index([seasonId])
}

model RoomType{
  id String @id @default(uuid())
  name String
  Room Room[]
}

model RoomRate{
  id String @id @default(uuid())
  name String
  description String
  Room Room[]
}

model Pax{
  id String @id @default(uuid())
  maxAdults Int
  maxChildren Int
  maxInfants Int

  roomId String
  Room    Room?    @relation(fields: [roomId], references: [id])
}

model Refunds{
  id String @id @default(uuid())
  refundAmount Int
  reason String
  status String
  createAt DateTime

  bookingId String
  Booking    Booking?    @relation(fields: [bookingId], references: [id])
}

model PaymentMethod{
  id String @id @default(uuid())
  name String
   bookingId String
  Booking    Booking?    @relation(fields: [bookingId], references: [id])
}